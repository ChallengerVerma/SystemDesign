import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

public class CalculationController {
    private static final int MAX_THREADS = 50;
    private static final ExecutorService executor = Executors.newFixedThreadPool(MAX_THREADS);
    private static final Semaphore semaphore = new Semaphore(MAX_THREADS);

    public static void main(String[] args) {
        // Submit tasks for calculation
        for (int i = 0; i < 1000; i++) { // For example, submit 1000 tasks
            Runnable task = () -> {
                // Perform CPU-intensive calculation here
                performCalculation();
            };
            executeTask(task);
        }

        // Shutdown executor after all tasks are completed
        executor.shutdown();
    }

    private static void executeTask(Runnable task) {
        try {
            semaphore.acquire(); // Acquire a permit
            executor.submit(() -> {
                try {
                    task.run();
                } finally {
                    semaphore.release(); // Release the permit
                }
            });
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }

    private static void performCalculation() {
        // Simulating CPU-intensive task
        double result = 0;
        for (int i = 0; i < 1000000; i++) {
            result += Math.random();
        }
        System.out.println("Calculation result: " + result);
    }
}
